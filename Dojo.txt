0 - Setup the project

For mac: brew install elm
For linux: sudo npm install -g elm

Run elm-reactor at the root directory.
You can also build the project in the command line: elm-make Main.elm --output index.html

Some syntax:

-- A comment

-- An enumeration
type Status = Good | Bad | Warning | Empty

-- A "case class" with two fields. Maybe is like scala's Option
type alias FtpStatus =
  { status : Status
  , downloadSpeed : Maybe Float
  }

-- Find the most recent date in a list of DetailedStatus
lastDate : List DetailedStatus -> Maybe Date
lastDate statusList = List.maximum (map .date statusList)

Main functions:
view : Model -> Html Msg
update : Msg -> Model -> (Model, Cmd Msg)
subscriptions : Model -> Sub Msg
init : ( Model, Cmd Msg )



1 - Modify a label

There is a "Fresh" label in the UI. It indicates that the cat gif was loaded. Change it to "Fresh!"
Then reload the page in the browser to see the change.


2 - Break the logic

The "Fresh!" label depends on the value of the model, specifically on the field model.refreshOk.
In the update function, set model.refresh to False when the fetch succeeded, and to True when it failed.

The model contains all the mutable state of the application. It can only be updated in the update function.


3 - Make the title smaller

The title is wrapped in an H1 tag: make it smaller.

The view function produces a full virtual DOM every time the model is updated, like ReactJS.


4 - Display all the directories by default

The model contains a flag that controls whether we display everything or only the errors. Change the default behaviour.

If you find all the uses of displayErrorsOnly and ToggleErrorDisplay, they form a basic control loop (UI -> Message -> Update of the model -> UI).


5 - Make the gif change every 5 seconds

Subscriptions are used to send messages to the update function (in this case, "Tick").
We can declare a subscription to a timer, the mouse coordinates, the keyboard, websockets...

When the Tick message is received, it triggers a Command (i.e a side effect) that fetches some Url.
After the HTTP call, the return value is wrapped in a message (FetchSucceed or FetchFail).
See getRandomGif and decodeGifUrl.


6 - Add a field to the FtpStatus

The FtpStatus case class contains 2 fields. Add a third one and fix the compile errors in allStatus.
Then display it in the UI.


7 - Set a default query string in the search box

You need to:
- Change the initial model value to: Just "iheart"
- Add a "value" attribute to the search box, using the following: (Maybe.withDefault "" model.query)
